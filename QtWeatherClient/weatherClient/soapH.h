/* soapH.h
   Generated by gSOAP 2.8.99 for weatherService.h

gSOAP XML Web services toolsss
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult_DEFINED
#define SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, const char*, int, const _ns1__getSupportDataSetResponse_getSupportDataSetResult *, const char*);
SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_in__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, const char*, _ns1__getSupportDataSetResponse_getSupportDataSetResult *, const char*);
SOAP_FMAC1 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportDataSetResponse_getSupportDataSetResult * soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportDataSetResponse_getSupportDataSetResult * soap_new_req__ns1__getSupportDataSetResponse_getSupportDataSetResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__getSupportDataSetResponse_getSupportDataSetResult *_p = ::soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__getSupportDataSetResponse_getSupportDataSetResult * soap_new_set__ns1__getSupportDataSetResponse_getSupportDataSetResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__getSupportDataSetResponse_getSupportDataSetResult *_p = ::soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema = xsd__schema;
		_p->_ns1__getSupportDataSetResponse_getSupportDataSetResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse-getSupportDataSetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse_getSupportDataSetResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse-getSupportDataSetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse_getSupportDataSetResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse-getSupportDataSetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse_getSupportDataSetResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse-getSupportDataSetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_get__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, _ns1__getSupportDataSetResponse_getSupportDataSetResult *, const char*, const char*);

inline int soap_read__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse_getSupportDataSetResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _ns1__getSupportDataSetResponse_getSupportDataSetResult *p)
{
	if (::soap_read__ns1__getSupportDataSetResponse_getSupportDataSetResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__DataSet_DEFINED
#define SOAP_TYPE__ns1__DataSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataSet(struct soap*, const char*, int, const _ns1__DataSet *, const char*);
SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_in__ns1__DataSet(struct soap*, const char*, _ns1__DataSet *, const char*);
SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataSet * soap_new__ns1__DataSet(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DataSet(soap, n, NULL, NULL, NULL);
}

inline _ns1__DataSet * soap_new_req__ns1__DataSet(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__DataSet *_p = ::soap_new__ns1__DataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataSet::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__DataSet * soap_new_set__ns1__DataSet(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__DataSet *_p = ::soap_new__ns1__DataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataSet::xsd__schema = xsd__schema;
		_p->_ns1__DataSet::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__DataSet(struct soap *soap, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_get__ns1__DataSet(struct soap*, _ns1__DataSet *, const char*, const char*);

inline int soap_read__ns1__DataSet(struct soap *soap, _ns1__DataSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DataSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__DataSet(struct soap *soap, _ns1__DataSet *p)
{
	if (::soap_read__ns1__DataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameProResponse_DEFINED
#define SOAP_TYPE__ns1__getWeatherbyCityNameProResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNameProResponse(struct soap*, const char*, int, const _ns1__getWeatherbyCityNameProResponse *, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNameProResponse(struct soap*, const char*, _ns1__getWeatherbyCityNameProResponse *, const char*);
SOAP_FMAC1 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameProResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeatherbyCityNameProResponse * soap_new__ns1__getWeatherbyCityNameProResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeatherbyCityNameProResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeatherbyCityNameProResponse * soap_new_req__ns1__getWeatherbyCityNameProResponse(
	struct soap *soap)
{
	_ns1__getWeatherbyCityNameProResponse *_p = ::soap_new__ns1__getWeatherbyCityNameProResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeatherbyCityNameProResponse * soap_new_set__ns1__getWeatherbyCityNameProResponse(
	struct soap *soap,
	ns1__ArrayOfString *getWeatherbyCityNameProResult)
{
	_ns1__getWeatherbyCityNameProResponse *_p = ::soap_new__ns1__getWeatherbyCityNameProResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult = getWeatherbyCityNameProResult;
	}
	return _p;
}

inline int soap_write__ns1__getWeatherbyCityNameProResponse(struct soap *soap, _ns1__getWeatherbyCityNameProResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameProResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameProResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameProResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameProResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameProResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameProResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameProResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameProResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameProResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameProResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameProResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNameProResponse(struct soap*, _ns1__getWeatherbyCityNameProResponse *, const char*, const char*);

inline int soap_read__ns1__getWeatherbyCityNameProResponse(struct soap *soap, _ns1__getWeatherbyCityNameProResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeatherbyCityNameProResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeatherbyCityNameProResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameProResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeatherbyCityNameProResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getWeatherbyCityNameProResponse(struct soap *soap, _ns1__getWeatherbyCityNameProResponse *p)
{
	if (::soap_read__ns1__getWeatherbyCityNameProResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNamePro_DEFINED
#define SOAP_TYPE__ns1__getWeatherbyCityNamePro_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNamePro(struct soap*, const char*, int, const _ns1__getWeatherbyCityNamePro *, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNamePro(struct soap*, const char*, _ns1__getWeatherbyCityNamePro *, const char*);
SOAP_FMAC1 _ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNamePro(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeatherbyCityNamePro * soap_new__ns1__getWeatherbyCityNamePro(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeatherbyCityNamePro(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeatherbyCityNamePro * soap_new_req__ns1__getWeatherbyCityNamePro(
	struct soap *soap)
{
	_ns1__getWeatherbyCityNamePro *_p = ::soap_new__ns1__getWeatherbyCityNamePro(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeatherbyCityNamePro * soap_new_set__ns1__getWeatherbyCityNamePro(
	struct soap *soap,
	std::string *theCityName,
	std::string *theUserID)
{
	_ns1__getWeatherbyCityNamePro *_p = ::soap_new__ns1__getWeatherbyCityNamePro(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeatherbyCityNamePro::theCityName = theCityName;
		_p->_ns1__getWeatherbyCityNamePro::theUserID = theUserID;
	}
	return _p;
}

inline int soap_write__ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNamePro", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNamePro ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNamePro", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNamePro ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNamePro", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNamePro ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNamePro", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNamePro ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro *, const char*, const char*);

inline int soap_read__ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeatherbyCityNamePro(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNamePro *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeatherbyCityNamePro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getWeatherbyCityNamePro(struct soap *soap, _ns1__getWeatherbyCityNamePro *p)
{
	if (::soap_read__ns1__getWeatherbyCityNamePro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameResponse_DEFINED
#define SOAP_TYPE__ns1__getWeatherbyCityNameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityNameResponse(struct soap*, const char*, int, const _ns1__getWeatherbyCityNameResponse *, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityNameResponse(struct soap*, const char*, _ns1__getWeatherbyCityNameResponse *, const char*);
SOAP_FMAC1 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeatherbyCityNameResponse * soap_new__ns1__getWeatherbyCityNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeatherbyCityNameResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeatherbyCityNameResponse * soap_new_req__ns1__getWeatherbyCityNameResponse(
	struct soap *soap)
{
	_ns1__getWeatherbyCityNameResponse *_p = ::soap_new__ns1__getWeatherbyCityNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeatherbyCityNameResponse * soap_new_set__ns1__getWeatherbyCityNameResponse(
	struct soap *soap,
	ns1__ArrayOfString *getWeatherbyCityNameResult)
{
	_ns1__getWeatherbyCityNameResponse *_p = ::soap_new__ns1__getWeatherbyCityNameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult = getWeatherbyCityNameResult;
	}
	return _p;
}

inline int soap_write__ns1__getWeatherbyCityNameResponse(struct soap *soap, _ns1__getWeatherbyCityNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityNameResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityNameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityNameResponse(struct soap*, _ns1__getWeatherbyCityNameResponse *, const char*, const char*);

inline int soap_read__ns1__getWeatherbyCityNameResponse(struct soap *soap, _ns1__getWeatherbyCityNameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeatherbyCityNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeatherbyCityNameResponse(struct soap *soap, const char *URL, _ns1__getWeatherbyCityNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeatherbyCityNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getWeatherbyCityNameResponse(struct soap *soap, _ns1__getWeatherbyCityNameResponse *p)
{
	if (::soap_read__ns1__getWeatherbyCityNameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityName_DEFINED
#define SOAP_TYPE__ns1__getWeatherbyCityName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherbyCityName(struct soap*, const char*, int, const _ns1__getWeatherbyCityName *, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityName * SOAP_FMAC4 soap_in__ns1__getWeatherbyCityName(struct soap*, const char*, _ns1__getWeatherbyCityName *, const char*);
SOAP_FMAC1 _ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityName(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeatherbyCityName * soap_new__ns1__getWeatherbyCityName(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeatherbyCityName(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeatherbyCityName * soap_new_req__ns1__getWeatherbyCityName(
	struct soap *soap)
{
	_ns1__getWeatherbyCityName *_p = ::soap_new__ns1__getWeatherbyCityName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeatherbyCityName * soap_new_set__ns1__getWeatherbyCityName(
	struct soap *soap,
	std::string *theCityName)
{
	_ns1__getWeatherbyCityName *_p = ::soap_new__ns1__getWeatherbyCityName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeatherbyCityName::theCityName = theCityName;
	}
	return _p;
}

inline int soap_write__ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityName", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeatherbyCityName(struct soap *soap, const char *URL, _ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityName", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getWeatherbyCityName(struct soap *soap, const char *URL, _ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityName", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeatherbyCityName(struct soap *soap, const char *URL, _ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherbyCityName", p->soap_type() == SOAP_TYPE__ns1__getWeatherbyCityName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeatherbyCityName * SOAP_FMAC4 soap_get__ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName *, const char*, const char*);

inline int soap_read__ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeatherbyCityName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeatherbyCityName(struct soap *soap, const char *URL, _ns1__getWeatherbyCityName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeatherbyCityName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getWeatherbyCityName(struct soap *soap, _ns1__getWeatherbyCityName *p)
{
	if (::soap_read__ns1__getWeatherbyCityName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse_DEFINED
#define SOAP_TYPE__ns1__getSupportDataSetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSetResponse(struct soap*, const char*, int, const _ns1__getSupportDataSetResponse *, const char*);
SOAP_FMAC3 _ns1__getSupportDataSetResponse * SOAP_FMAC4 soap_in__ns1__getSupportDataSetResponse(struct soap*, const char*, _ns1__getSupportDataSetResponse *, const char*);
SOAP_FMAC1 _ns1__getSupportDataSetResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportDataSetResponse * soap_new__ns1__getSupportDataSetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportDataSetResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportDataSetResponse * soap_new_req__ns1__getSupportDataSetResponse(
	struct soap *soap)
{
	_ns1__getSupportDataSetResponse *_p = ::soap_new__ns1__getSupportDataSetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportDataSetResponse * soap_new_set__ns1__getSupportDataSetResponse(
	struct soap *soap,
	_ns1__getSupportDataSetResponse_getSupportDataSetResult *getSupportDataSetResult)
{
	_ns1__getSupportDataSetResponse *_p = ::soap_new__ns1__getSupportDataSetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportDataSetResponse::getSupportDataSetResult = getSupportDataSetResult;
	}
	return _p;
}

inline int soap_write__ns1__getSupportDataSetResponse(struct soap *soap, _ns1__getSupportDataSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportDataSetResponse(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportDataSetResponse(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportDataSetResponse(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportDataSetResponse * SOAP_FMAC4 soap_get__ns1__getSupportDataSetResponse(struct soap*, _ns1__getSupportDataSetResponse *, const char*, const char*);

inline int soap_read__ns1__getSupportDataSetResponse(struct soap *soap, _ns1__getSupportDataSetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportDataSetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportDataSetResponse(struct soap *soap, const char *URL, _ns1__getSupportDataSetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportDataSetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportDataSetResponse(struct soap *soap, _ns1__getSupportDataSetResponse *p)
{
	if (::soap_read__ns1__getSupportDataSetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSet_DEFINED
#define SOAP_TYPE__ns1__getSupportDataSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportDataSet(struct soap*, const char*, int, const _ns1__getSupportDataSet *, const char*);
SOAP_FMAC3 _ns1__getSupportDataSet * SOAP_FMAC4 soap_in__ns1__getSupportDataSet(struct soap*, const char*, _ns1__getSupportDataSet *, const char*);
SOAP_FMAC1 _ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportDataSet * soap_new__ns1__getSupportDataSet(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportDataSet(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportDataSet * soap_new_req__ns1__getSupportDataSet(
	struct soap *soap)
{
	_ns1__getSupportDataSet *_p = ::soap_new__ns1__getSupportDataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportDataSet * soap_new_set__ns1__getSupportDataSet(
	struct soap *soap)
{
	_ns1__getSupportDataSet *_p = ::soap_new__ns1__getSupportDataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSet", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportDataSet(struct soap *soap, const char *URL, _ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSet", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportDataSet(struct soap *soap, const char *URL, _ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSet", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportDataSet(struct soap *soap, const char *URL, _ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportDataSet", p->soap_type() == SOAP_TYPE__ns1__getSupportDataSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportDataSet * SOAP_FMAC4 soap_get__ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet *, const char*, const char*);

inline int soap_read__ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportDataSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportDataSet(struct soap *soap, const char *URL, _ns1__getSupportDataSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportDataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportDataSet(struct soap *soap, _ns1__getSupportDataSet *p)
{
	if (::soap_read__ns1__getSupportDataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportProvinceResponse_DEFINED
#define SOAP_TYPE__ns1__getSupportProvinceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportProvinceResponse(struct soap*, const char*, int, const _ns1__getSupportProvinceResponse *, const char*);
SOAP_FMAC3 _ns1__getSupportProvinceResponse * SOAP_FMAC4 soap_in__ns1__getSupportProvinceResponse(struct soap*, const char*, _ns1__getSupportProvinceResponse *, const char*);
SOAP_FMAC1 _ns1__getSupportProvinceResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvinceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportProvinceResponse * soap_new__ns1__getSupportProvinceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportProvinceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportProvinceResponse * soap_new_req__ns1__getSupportProvinceResponse(
	struct soap *soap)
{
	_ns1__getSupportProvinceResponse *_p = ::soap_new__ns1__getSupportProvinceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportProvinceResponse * soap_new_set__ns1__getSupportProvinceResponse(
	struct soap *soap,
	ns1__ArrayOfString *getSupportProvinceResult)
{
	_ns1__getSupportProvinceResponse *_p = ::soap_new__ns1__getSupportProvinceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportProvinceResponse::getSupportProvinceResult = getSupportProvinceResult;
	}
	return _p;
}

inline int soap_write__ns1__getSupportProvinceResponse(struct soap *soap, _ns1__getSupportProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportProvinceResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportProvinceResponse(struct soap *soap, const char *URL, _ns1__getSupportProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportProvinceResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportProvinceResponse(struct soap *soap, const char *URL, _ns1__getSupportProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportProvinceResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportProvinceResponse(struct soap *soap, const char *URL, _ns1__getSupportProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportProvinceResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportProvinceResponse * SOAP_FMAC4 soap_get__ns1__getSupportProvinceResponse(struct soap*, _ns1__getSupportProvinceResponse *, const char*, const char*);

inline int soap_read__ns1__getSupportProvinceResponse(struct soap *soap, _ns1__getSupportProvinceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportProvinceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportProvinceResponse(struct soap *soap, const char *URL, _ns1__getSupportProvinceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportProvinceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportProvinceResponse(struct soap *soap, _ns1__getSupportProvinceResponse *p)
{
	if (::soap_read__ns1__getSupportProvinceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportProvince_DEFINED
#define SOAP_TYPE__ns1__getSupportProvince_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportProvince(struct soap*, const char*, int, const _ns1__getSupportProvince *, const char*);
SOAP_FMAC3 _ns1__getSupportProvince * SOAP_FMAC4 soap_in__ns1__getSupportProvince(struct soap*, const char*, _ns1__getSupportProvince *, const char*);
SOAP_FMAC1 _ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvince(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportProvince * soap_new__ns1__getSupportProvince(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportProvince(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportProvince * soap_new_req__ns1__getSupportProvince(
	struct soap *soap)
{
	_ns1__getSupportProvince *_p = ::soap_new__ns1__getSupportProvince(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportProvince * soap_new_set__ns1__getSupportProvince(
	struct soap *soap)
{
	_ns1__getSupportProvince *_p = ::soap_new__ns1__getSupportProvince(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvince", p->soap_type() == SOAP_TYPE__ns1__getSupportProvince ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportProvince(struct soap *soap, const char *URL, _ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvince", p->soap_type() == SOAP_TYPE__ns1__getSupportProvince ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportProvince(struct soap *soap, const char *URL, _ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvince", p->soap_type() == SOAP_TYPE__ns1__getSupportProvince ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportProvince(struct soap *soap, const char *URL, _ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportProvince", p->soap_type() == SOAP_TYPE__ns1__getSupportProvince ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportProvince * SOAP_FMAC4 soap_get__ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince *, const char*, const char*);

inline int soap_read__ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportProvince(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportProvince(struct soap *soap, const char *URL, _ns1__getSupportProvince *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportProvince(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportProvince(struct soap *soap, _ns1__getSupportProvince *p)
{
	if (::soap_read__ns1__getSupportProvince(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityResponse_DEFINED
#define SOAP_TYPE__ns1__getSupportCityResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityResponse(struct soap*, const char*, int, const _ns1__getSupportCityResponse *, const char*);
SOAP_FMAC3 _ns1__getSupportCityResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityResponse(struct soap*, const char*, _ns1__getSupportCityResponse *, const char*);
SOAP_FMAC1 _ns1__getSupportCityResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityResponse * soap_new__ns1__getSupportCityResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityResponse * soap_new_req__ns1__getSupportCityResponse(
	struct soap *soap)
{
	_ns1__getSupportCityResponse *_p = ::soap_new__ns1__getSupportCityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCityResponse * soap_new_set__ns1__getSupportCityResponse(
	struct soap *soap,
	ns1__ArrayOfString *getSupportCityResult)
{
	_ns1__getSupportCityResponse *_p = ::soap_new__ns1__getSupportCityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityResponse::getSupportCityResult = getSupportCityResult;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityResponse(struct soap *soap, _ns1__getSupportCityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityResponse(struct soap *soap, const char *URL, _ns1__getSupportCityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportCityResponse(struct soap *soap, const char *URL, _ns1__getSupportCityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityResponse(struct soap *soap, const char *URL, _ns1__getSupportCityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityResponse(struct soap*, _ns1__getSupportCityResponse *, const char*, const char*);

inline int soap_read__ns1__getSupportCityResponse(struct soap *soap, _ns1__getSupportCityResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityResponse(struct soap *soap, const char *URL, _ns1__getSupportCityResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportCityResponse(struct soap *soap, _ns1__getSupportCityResponse *p)
{
	if (::soap_read__ns1__getSupportCityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCity_DEFINED
#define SOAP_TYPE__ns1__getSupportCity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCity(struct soap*, const char*, int, const _ns1__getSupportCity *, const char*);
SOAP_FMAC3 _ns1__getSupportCity * SOAP_FMAC4 soap_in__ns1__getSupportCity(struct soap*, const char*, _ns1__getSupportCity *, const char*);
SOAP_FMAC1 _ns1__getSupportCity * SOAP_FMAC2 soap_instantiate__ns1__getSupportCity(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCity * soap_new__ns1__getSupportCity(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCity(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCity * soap_new_req__ns1__getSupportCity(
	struct soap *soap)
{
	_ns1__getSupportCity *_p = ::soap_new__ns1__getSupportCity(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCity * soap_new_set__ns1__getSupportCity(
	struct soap *soap,
	std::string *byProvinceName)
{
	_ns1__getSupportCity *_p = ::soap_new__ns1__getSupportCity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCity::byProvinceName = byProvinceName;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCity", p->soap_type() == SOAP_TYPE__ns1__getSupportCity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCity(struct soap *soap, const char *URL, _ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCity", p->soap_type() == SOAP_TYPE__ns1__getSupportCity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSupportCity(struct soap *soap, const char *URL, _ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCity", p->soap_type() == SOAP_TYPE__ns1__getSupportCity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCity(struct soap *soap, const char *URL, _ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCity", p->soap_type() == SOAP_TYPE__ns1__getSupportCity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCity * SOAP_FMAC4 soap_get__ns1__getSupportCity(struct soap*, _ns1__getSupportCity *, const char*, const char*);

inline int soap_read__ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCity(struct soap *soap, const char *URL, _ns1__getSupportCity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSupportCity(struct soap *soap, _ns1__getSupportCity *p)
{
	if (::soap_read__ns1__getSupportCity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString_DEFINED
#define SOAP_TYPE_ns1__ArrayOfString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap*, const char*, int, const ns1__ArrayOfString *, const char*);
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString *, const char*);
SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfString * soap_new_ns1__ArrayOfString(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfString * soap_new_req_ns1__ArrayOfString(
	struct soap *soap)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfString * soap_new_set_ns1__ArrayOfString(
	struct soap *soap,
	const std::vector<std::string> & string)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfString::string = string;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap*, ns1__ArrayOfString *, const char*, const char*);

inline int soap_read_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (::soap_read_ns1__ArrayOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro__DEFINED
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityNamePro_(struct soap*, struct __ns1__getWeatherbyCityNamePro_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityNamePro_(struct soap*, const struct __ns1__getWeatherbyCityNamePro_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityNamePro_(struct soap*, const char*, int, const struct __ns1__getWeatherbyCityNamePro_ *, const char*);
SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityNamePro_(struct soap*, const char*, struct __ns1__getWeatherbyCityNamePro_ *, const char*);
SOAP_FMAC1 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeatherbyCityNamePro_ * soap_new___ns1__getWeatherbyCityNamePro_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeatherbyCityNamePro_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeatherbyCityNamePro_ * soap_new_req___ns1__getWeatherbyCityNamePro_(
	struct soap *soap)
{
	struct __ns1__getWeatherbyCityNamePro_ *_p = ::soap_new___ns1__getWeatherbyCityNamePro_(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityNamePro_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeatherbyCityNamePro_ * soap_new_set___ns1__getWeatherbyCityNamePro_(
	struct soap *soap,
	_ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro)
{
	struct __ns1__getWeatherbyCityNamePro_ *_p = ::soap_new___ns1__getWeatherbyCityNamePro_(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityNamePro_(soap, _p);
		_p->ns1__getWeatherbyCityNamePro = ns1__getWeatherbyCityNamePro;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityNamePro_(struct soap*, const struct __ns1__getWeatherbyCityNamePro_ *, const char*, const char*);

inline int soap_write___ns1__getWeatherbyCityNamePro_(struct soap *soap, struct __ns1__getWeatherbyCityNamePro_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeatherbyCityNamePro_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro_(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro_(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro_(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro_(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityNamePro_(struct soap*, struct __ns1__getWeatherbyCityNamePro_ *, const char*, const char*);

inline int soap_read___ns1__getWeatherbyCityNamePro_(struct soap *soap, struct __ns1__getWeatherbyCityNamePro_ *p)
{
	if (p)
	{	::soap_default___ns1__getWeatherbyCityNamePro_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeatherbyCityNamePro_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeatherbyCityNamePro_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getWeatherbyCityNamePro_(struct soap *soap, struct __ns1__getWeatherbyCityNamePro_ *p)
{
	if (::soap_read___ns1__getWeatherbyCityNamePro_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityName__DEFINED
#define SOAP_TYPE___ns1__getWeatherbyCityName__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityName_(struct soap*, struct __ns1__getWeatherbyCityName_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityName_(struct soap*, const struct __ns1__getWeatherbyCityName_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityName_(struct soap*, const char*, int, const struct __ns1__getWeatherbyCityName_ *, const char*);
SOAP_FMAC3 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityName_(struct soap*, const char*, struct __ns1__getWeatherbyCityName_ *, const char*);
SOAP_FMAC1 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeatherbyCityName_ * soap_new___ns1__getWeatherbyCityName_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeatherbyCityName_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeatherbyCityName_ * soap_new_req___ns1__getWeatherbyCityName_(
	struct soap *soap)
{
	struct __ns1__getWeatherbyCityName_ *_p = ::soap_new___ns1__getWeatherbyCityName_(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityName_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeatherbyCityName_ * soap_new_set___ns1__getWeatherbyCityName_(
	struct soap *soap,
	_ns1__getWeatherbyCityName *ns1__getWeatherbyCityName)
{
	struct __ns1__getWeatherbyCityName_ *_p = ::soap_new___ns1__getWeatherbyCityName_(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityName_(soap, _p);
		_p->ns1__getWeatherbyCityName = ns1__getWeatherbyCityName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityName_(struct soap*, const struct __ns1__getWeatherbyCityName_ *, const char*, const char*);

inline int soap_write___ns1__getWeatherbyCityName_(struct soap *soap, struct __ns1__getWeatherbyCityName_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeatherbyCityName_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName_(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeatherbyCityName_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName_(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getWeatherbyCityName_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName_(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeatherbyCityName_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName_(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName_(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeatherbyCityName_ * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityName_(struct soap*, struct __ns1__getWeatherbyCityName_ *, const char*, const char*);

inline int soap_read___ns1__getWeatherbyCityName_(struct soap *soap, struct __ns1__getWeatherbyCityName_ *p)
{
	if (p)
	{	::soap_default___ns1__getWeatherbyCityName_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeatherbyCityName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeatherbyCityName_(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeatherbyCityName_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getWeatherbyCityName_(struct soap *soap, struct __ns1__getWeatherbyCityName_ *p)
{
	if (::soap_read___ns1__getWeatherbyCityName_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportDataSet__DEFINED
#define SOAP_TYPE___ns1__getSupportDataSet__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportDataSet_(struct soap*, struct __ns1__getSupportDataSet_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportDataSet_(struct soap*, const struct __ns1__getSupportDataSet_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportDataSet_(struct soap*, const char*, int, const struct __ns1__getSupportDataSet_ *, const char*);
SOAP_FMAC3 struct __ns1__getSupportDataSet_ * SOAP_FMAC4 soap_in___ns1__getSupportDataSet_(struct soap*, const char*, struct __ns1__getSupportDataSet_ *, const char*);
SOAP_FMAC1 struct __ns1__getSupportDataSet_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportDataSet_ * soap_new___ns1__getSupportDataSet_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportDataSet_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportDataSet_ * soap_new_req___ns1__getSupportDataSet_(
	struct soap *soap)
{
	struct __ns1__getSupportDataSet_ *_p = ::soap_new___ns1__getSupportDataSet_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportDataSet_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportDataSet_ * soap_new_set___ns1__getSupportDataSet_(
	struct soap *soap,
	_ns1__getSupportDataSet *ns1__getSupportDataSet)
{
	struct __ns1__getSupportDataSet_ *_p = ::soap_new___ns1__getSupportDataSet_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportDataSet_(soap, _p);
		_p->ns1__getSupportDataSet = ns1__getSupportDataSet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportDataSet_(struct soap*, const struct __ns1__getSupportDataSet_ *, const char*, const char*);

inline int soap_write___ns1__getSupportDataSet_(struct soap *soap, struct __ns1__getSupportDataSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportDataSet_(soap, p), 0) || ::soap_put___ns1__getSupportDataSet_(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportDataSet_(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet_(soap, p), 0) || ::soap_put___ns1__getSupportDataSet_(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportDataSet_(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet_(soap, p), 0) || ::soap_put___ns1__getSupportDataSet_(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportDataSet_(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet_(soap, p), 0) || ::soap_put___ns1__getSupportDataSet_(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportDataSet_ * SOAP_FMAC4 soap_get___ns1__getSupportDataSet_(struct soap*, struct __ns1__getSupportDataSet_ *, const char*, const char*);

inline int soap_read___ns1__getSupportDataSet_(struct soap *soap, struct __ns1__getSupportDataSet_ *p)
{
	if (p)
	{	::soap_default___ns1__getSupportDataSet_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportDataSet_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportDataSet_(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportDataSet_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportDataSet_(struct soap *soap, struct __ns1__getSupportDataSet_ *p)
{
	if (::soap_read___ns1__getSupportDataSet_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportProvince__DEFINED
#define SOAP_TYPE___ns1__getSupportProvince__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportProvince_(struct soap*, struct __ns1__getSupportProvince_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportProvince_(struct soap*, const struct __ns1__getSupportProvince_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportProvince_(struct soap*, const char*, int, const struct __ns1__getSupportProvince_ *, const char*);
SOAP_FMAC3 struct __ns1__getSupportProvince_ * SOAP_FMAC4 soap_in___ns1__getSupportProvince_(struct soap*, const char*, struct __ns1__getSupportProvince_ *, const char*);
SOAP_FMAC1 struct __ns1__getSupportProvince_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportProvince_ * soap_new___ns1__getSupportProvince_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportProvince_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportProvince_ * soap_new_req___ns1__getSupportProvince_(
	struct soap *soap)
{
	struct __ns1__getSupportProvince_ *_p = ::soap_new___ns1__getSupportProvince_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportProvince_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportProvince_ * soap_new_set___ns1__getSupportProvince_(
	struct soap *soap,
	_ns1__getSupportProvince *ns1__getSupportProvince)
{
	struct __ns1__getSupportProvince_ *_p = ::soap_new___ns1__getSupportProvince_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportProvince_(soap, _p);
		_p->ns1__getSupportProvince = ns1__getSupportProvince;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportProvince_(struct soap*, const struct __ns1__getSupportProvince_ *, const char*, const char*);

inline int soap_write___ns1__getSupportProvince_(struct soap *soap, struct __ns1__getSupportProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportProvince_(soap, p), 0) || ::soap_put___ns1__getSupportProvince_(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportProvince_(struct soap *soap, const char *URL, struct __ns1__getSupportProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince_(soap, p), 0) || ::soap_put___ns1__getSupportProvince_(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportProvince_(struct soap *soap, const char *URL, struct __ns1__getSupportProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince_(soap, p), 0) || ::soap_put___ns1__getSupportProvince_(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportProvince_(struct soap *soap, const char *URL, struct __ns1__getSupportProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince_(soap, p), 0) || ::soap_put___ns1__getSupportProvince_(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportProvince_ * SOAP_FMAC4 soap_get___ns1__getSupportProvince_(struct soap*, struct __ns1__getSupportProvince_ *, const char*, const char*);

inline int soap_read___ns1__getSupportProvince_(struct soap *soap, struct __ns1__getSupportProvince_ *p)
{
	if (p)
	{	::soap_default___ns1__getSupportProvince_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportProvince_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportProvince_(struct soap *soap, const char *URL, struct __ns1__getSupportProvince_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportProvince_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportProvince_(struct soap *soap, struct __ns1__getSupportProvince_ *p)
{
	if (::soap_read___ns1__getSupportProvince_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCity__DEFINED
#define SOAP_TYPE___ns1__getSupportCity__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCity_(struct soap*, struct __ns1__getSupportCity_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCity_(struct soap*, const struct __ns1__getSupportCity_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCity_(struct soap*, const char*, int, const struct __ns1__getSupportCity_ *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCity_ * SOAP_FMAC4 soap_in___ns1__getSupportCity_(struct soap*, const char*, struct __ns1__getSupportCity_ *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCity_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCity_ * soap_new___ns1__getSupportCity_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCity_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCity_ * soap_new_req___ns1__getSupportCity_(
	struct soap *soap)
{
	struct __ns1__getSupportCity_ *_p = ::soap_new___ns1__getSupportCity_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCity_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCity_ * soap_new_set___ns1__getSupportCity_(
	struct soap *soap,
	_ns1__getSupportCity *ns1__getSupportCity)
{
	struct __ns1__getSupportCity_ *_p = ::soap_new___ns1__getSupportCity_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCity_(soap, _p);
		_p->ns1__getSupportCity = ns1__getSupportCity;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCity_(struct soap*, const struct __ns1__getSupportCity_ *, const char*, const char*);

inline int soap_write___ns1__getSupportCity_(struct soap *soap, struct __ns1__getSupportCity_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCity_(soap, p), 0) || ::soap_put___ns1__getSupportCity_(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCity_(struct soap *soap, const char *URL, struct __ns1__getSupportCity_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity_(soap, p), 0) || ::soap_put___ns1__getSupportCity_(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportCity_(struct soap *soap, const char *URL, struct __ns1__getSupportCity_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity_(soap, p), 0) || ::soap_put___ns1__getSupportCity_(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCity_(struct soap *soap, const char *URL, struct __ns1__getSupportCity_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity_(soap, p), 0) || ::soap_put___ns1__getSupportCity_(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCity_ * SOAP_FMAC4 soap_get___ns1__getSupportCity_(struct soap*, struct __ns1__getSupportCity_ *, const char*, const char*);

inline int soap_read___ns1__getSupportCity_(struct soap *soap, struct __ns1__getSupportCity_ *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCity_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCity_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCity_(struct soap *soap, const char *URL, struct __ns1__getSupportCity_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCity_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportCity_(struct soap *soap, struct __ns1__getSupportCity_ *p)
{
	if (::soap_read___ns1__getSupportCity_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro_DEFINED
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityNamePro(struct soap*, struct __ns1__getWeatherbyCityNamePro *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityNamePro(struct soap*, const struct __ns1__getWeatherbyCityNamePro *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityNamePro(struct soap*, const char*, int, const struct __ns1__getWeatherbyCityNamePro *, const char*);
SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityNamePro(struct soap*, const char*, struct __ns1__getWeatherbyCityNamePro *, const char*);
SOAP_FMAC1 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeatherbyCityNamePro * soap_new___ns1__getWeatherbyCityNamePro(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeatherbyCityNamePro(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeatherbyCityNamePro * soap_new_req___ns1__getWeatherbyCityNamePro(
	struct soap *soap)
{
	struct __ns1__getWeatherbyCityNamePro *_p = ::soap_new___ns1__getWeatherbyCityNamePro(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityNamePro(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeatherbyCityNamePro * soap_new_set___ns1__getWeatherbyCityNamePro(
	struct soap *soap,
	_ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro)
{
	struct __ns1__getWeatherbyCityNamePro *_p = ::soap_new___ns1__getWeatherbyCityNamePro(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityNamePro(soap, _p);
		_p->ns1__getWeatherbyCityNamePro = ns1__getWeatherbyCityNamePro;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityNamePro(struct soap*, const struct __ns1__getWeatherbyCityNamePro *, const char*, const char*);

inline int soap_write___ns1__getWeatherbyCityNamePro(struct soap *soap, struct __ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeatherbyCityNamePro(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityNamePro(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityNamePro(soap, p, "-ns1:getWeatherbyCityNamePro", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityNamePro(struct soap*, struct __ns1__getWeatherbyCityNamePro *, const char*, const char*);

inline int soap_read___ns1__getWeatherbyCityNamePro(struct soap *soap, struct __ns1__getWeatherbyCityNamePro *p)
{
	if (p)
	{	::soap_default___ns1__getWeatherbyCityNamePro(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeatherbyCityNamePro(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityNamePro *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeatherbyCityNamePro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getWeatherbyCityNamePro(struct soap *soap, struct __ns1__getWeatherbyCityNamePro *p)
{
	if (::soap_read___ns1__getWeatherbyCityNamePro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityName_DEFINED
#define SOAP_TYPE___ns1__getWeatherbyCityName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeatherbyCityName(struct soap*, struct __ns1__getWeatherbyCityName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeatherbyCityName(struct soap*, const struct __ns1__getWeatherbyCityName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeatherbyCityName(struct soap*, const char*, int, const struct __ns1__getWeatherbyCityName *, const char*);
SOAP_FMAC3 struct __ns1__getWeatherbyCityName * SOAP_FMAC4 soap_in___ns1__getWeatherbyCityName(struct soap*, const char*, struct __ns1__getWeatherbyCityName *, const char*);
SOAP_FMAC1 struct __ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeatherbyCityName * soap_new___ns1__getWeatherbyCityName(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeatherbyCityName(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeatherbyCityName * soap_new_req___ns1__getWeatherbyCityName(
	struct soap *soap)
{
	struct __ns1__getWeatherbyCityName *_p = ::soap_new___ns1__getWeatherbyCityName(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityName(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeatherbyCityName * soap_new_set___ns1__getWeatherbyCityName(
	struct soap *soap,
	_ns1__getWeatherbyCityName *ns1__getWeatherbyCityName)
{
	struct __ns1__getWeatherbyCityName *_p = ::soap_new___ns1__getWeatherbyCityName(soap);
	if (_p)
	{	::soap_default___ns1__getWeatherbyCityName(soap, _p);
		_p->ns1__getWeatherbyCityName = ns1__getWeatherbyCityName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeatherbyCityName(struct soap*, const struct __ns1__getWeatherbyCityName *, const char*, const char*);

inline int soap_write___ns1__getWeatherbyCityName(struct soap *soap, struct __ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeatherbyCityName(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeatherbyCityName(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getWeatherbyCityName(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeatherbyCityName(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeatherbyCityName(soap, p), 0) || ::soap_put___ns1__getWeatherbyCityName(soap, p, "-ns1:getWeatherbyCityName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeatherbyCityName * SOAP_FMAC4 soap_get___ns1__getWeatherbyCityName(struct soap*, struct __ns1__getWeatherbyCityName *, const char*, const char*);

inline int soap_read___ns1__getWeatherbyCityName(struct soap *soap, struct __ns1__getWeatherbyCityName *p)
{
	if (p)
	{	::soap_default___ns1__getWeatherbyCityName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeatherbyCityName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeatherbyCityName(struct soap *soap, const char *URL, struct __ns1__getWeatherbyCityName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeatherbyCityName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getWeatherbyCityName(struct soap *soap, struct __ns1__getWeatherbyCityName *p)
{
	if (::soap_read___ns1__getWeatherbyCityName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportDataSet_DEFINED
#define SOAP_TYPE___ns1__getSupportDataSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportDataSet(struct soap*, struct __ns1__getSupportDataSet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportDataSet(struct soap*, const struct __ns1__getSupportDataSet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportDataSet(struct soap*, const char*, int, const struct __ns1__getSupportDataSet *, const char*);
SOAP_FMAC3 struct __ns1__getSupportDataSet * SOAP_FMAC4 soap_in___ns1__getSupportDataSet(struct soap*, const char*, struct __ns1__getSupportDataSet *, const char*);
SOAP_FMAC1 struct __ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportDataSet * soap_new___ns1__getSupportDataSet(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportDataSet(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportDataSet * soap_new_req___ns1__getSupportDataSet(
	struct soap *soap)
{
	struct __ns1__getSupportDataSet *_p = ::soap_new___ns1__getSupportDataSet(soap);
	if (_p)
	{	::soap_default___ns1__getSupportDataSet(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportDataSet * soap_new_set___ns1__getSupportDataSet(
	struct soap *soap,
	_ns1__getSupportDataSet *ns1__getSupportDataSet)
{
	struct __ns1__getSupportDataSet *_p = ::soap_new___ns1__getSupportDataSet(soap);
	if (_p)
	{	::soap_default___ns1__getSupportDataSet(soap, _p);
		_p->ns1__getSupportDataSet = ns1__getSupportDataSet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportDataSet(struct soap*, const struct __ns1__getSupportDataSet *, const char*, const char*);

inline int soap_write___ns1__getSupportDataSet(struct soap *soap, struct __ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportDataSet(soap, p), 0) || ::soap_put___ns1__getSupportDataSet(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportDataSet(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet(soap, p), 0) || ::soap_put___ns1__getSupportDataSet(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportDataSet(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet(soap, p), 0) || ::soap_put___ns1__getSupportDataSet(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportDataSet(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportDataSet(soap, p), 0) || ::soap_put___ns1__getSupportDataSet(soap, p, "-ns1:getSupportDataSet", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportDataSet * SOAP_FMAC4 soap_get___ns1__getSupportDataSet(struct soap*, struct __ns1__getSupportDataSet *, const char*, const char*);

inline int soap_read___ns1__getSupportDataSet(struct soap *soap, struct __ns1__getSupportDataSet *p)
{
	if (p)
	{	::soap_default___ns1__getSupportDataSet(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportDataSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportDataSet(struct soap *soap, const char *URL, struct __ns1__getSupportDataSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportDataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportDataSet(struct soap *soap, struct __ns1__getSupportDataSet *p)
{
	if (::soap_read___ns1__getSupportDataSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportProvince_DEFINED
#define SOAP_TYPE___ns1__getSupportProvince_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportProvince(struct soap*, struct __ns1__getSupportProvince *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportProvince(struct soap*, const struct __ns1__getSupportProvince *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportProvince(struct soap*, const char*, int, const struct __ns1__getSupportProvince *, const char*);
SOAP_FMAC3 struct __ns1__getSupportProvince * SOAP_FMAC4 soap_in___ns1__getSupportProvince(struct soap*, const char*, struct __ns1__getSupportProvince *, const char*);
SOAP_FMAC1 struct __ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportProvince * soap_new___ns1__getSupportProvince(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportProvince(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportProvince * soap_new_req___ns1__getSupportProvince(
	struct soap *soap)
{
	struct __ns1__getSupportProvince *_p = ::soap_new___ns1__getSupportProvince(soap);
	if (_p)
	{	::soap_default___ns1__getSupportProvince(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportProvince * soap_new_set___ns1__getSupportProvince(
	struct soap *soap,
	_ns1__getSupportProvince *ns1__getSupportProvince)
{
	struct __ns1__getSupportProvince *_p = ::soap_new___ns1__getSupportProvince(soap);
	if (_p)
	{	::soap_default___ns1__getSupportProvince(soap, _p);
		_p->ns1__getSupportProvince = ns1__getSupportProvince;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportProvince(struct soap*, const struct __ns1__getSupportProvince *, const char*, const char*);

inline int soap_write___ns1__getSupportProvince(struct soap *soap, struct __ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportProvince(soap, p), 0) || ::soap_put___ns1__getSupportProvince(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportProvince(struct soap *soap, const char *URL, struct __ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince(soap, p), 0) || ::soap_put___ns1__getSupportProvince(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportProvince(struct soap *soap, const char *URL, struct __ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince(soap, p), 0) || ::soap_put___ns1__getSupportProvince(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportProvince(struct soap *soap, const char *URL, struct __ns1__getSupportProvince const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportProvince(soap, p), 0) || ::soap_put___ns1__getSupportProvince(soap, p, "-ns1:getSupportProvince", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportProvince * SOAP_FMAC4 soap_get___ns1__getSupportProvince(struct soap*, struct __ns1__getSupportProvince *, const char*, const char*);

inline int soap_read___ns1__getSupportProvince(struct soap *soap, struct __ns1__getSupportProvince *p)
{
	if (p)
	{	::soap_default___ns1__getSupportProvince(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportProvince(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportProvince(struct soap *soap, const char *URL, struct __ns1__getSupportProvince *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportProvince(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportProvince(struct soap *soap, struct __ns1__getSupportProvince *p)
{
	if (::soap_read___ns1__getSupportProvince(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCity_DEFINED
#define SOAP_TYPE___ns1__getSupportCity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCity(struct soap*, struct __ns1__getSupportCity *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCity(struct soap*, const struct __ns1__getSupportCity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCity(struct soap*, const char*, int, const struct __ns1__getSupportCity *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCity * SOAP_FMAC4 soap_in___ns1__getSupportCity(struct soap*, const char*, struct __ns1__getSupportCity *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCity * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCity * soap_new___ns1__getSupportCity(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCity(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCity * soap_new_req___ns1__getSupportCity(
	struct soap *soap)
{
	struct __ns1__getSupportCity *_p = ::soap_new___ns1__getSupportCity(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCity(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCity * soap_new_set___ns1__getSupportCity(
	struct soap *soap,
	_ns1__getSupportCity *ns1__getSupportCity)
{
	struct __ns1__getSupportCity *_p = ::soap_new___ns1__getSupportCity(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCity(soap, _p);
		_p->ns1__getSupportCity = ns1__getSupportCity;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCity(struct soap*, const struct __ns1__getSupportCity *, const char*, const char*);

inline int soap_write___ns1__getSupportCity(struct soap *soap, struct __ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCity(soap, p), 0) || ::soap_put___ns1__getSupportCity(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCity(struct soap *soap, const char *URL, struct __ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity(soap, p), 0) || ::soap_put___ns1__getSupportCity(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSupportCity(struct soap *soap, const char *URL, struct __ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity(soap, p), 0) || ::soap_put___ns1__getSupportCity(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCity(struct soap *soap, const char *URL, struct __ns1__getSupportCity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCity(soap, p), 0) || ::soap_put___ns1__getSupportCity(soap, p, "-ns1:getSupportCity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCity * SOAP_FMAC4 soap_get___ns1__getSupportCity(struct soap*, struct __ns1__getSupportCity *, const char*, const char*);

inline int soap_read___ns1__getSupportCity(struct soap *soap, struct __ns1__getSupportCity *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCity(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCity(struct soap *soap, const char *URL, struct __ns1__getSupportCity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSupportCity(struct soap *soap, struct __ns1__getSupportCity *p)
{
	if (::soap_read___ns1__getSupportCity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeatherbyCityNamePro(struct soap*, const char *, int, _ns1__getWeatherbyCityNamePro *const*, const char *);
SOAP_FMAC3 _ns1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeatherbyCityNamePro(struct soap*, const char*, _ns1__getWeatherbyCityNamePro **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeatherbyCityName(struct soap*, const char *, int, _ns1__getWeatherbyCityName *const*, const char *);
SOAP_FMAC3 _ns1__getWeatherbyCityName ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeatherbyCityName(struct soap*, const char*, _ns1__getWeatherbyCityName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getWeatherbyCityName ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportDataSet_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportDataSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportDataSet(struct soap*, const char *, int, _ns1__getSupportDataSet *const*, const char *);
SOAP_FMAC3 _ns1__getSupportDataSet ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportDataSet(struct soap*, const char*, _ns1__getSupportDataSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportDataSet ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportProvince_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportProvince_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportProvince(struct soap*, const char *, int, _ns1__getSupportProvince *const*, const char *);
SOAP_FMAC3 _ns1__getSupportProvince ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportProvince(struct soap*, const char*, _ns1__getSupportProvince **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportProvince ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportCity_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportCity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCity(struct soap*, _ns1__getSupportCity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCity(struct soap*, const char *, int, _ns1__getSupportCity *const*, const char *);
SOAP_FMAC3 _ns1__getSupportCity ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCity(struct soap*, const char*, _ns1__getSupportCity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCity(struct soap*, _ns1__getSupportCity *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportCity ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCity(struct soap*, _ns1__getSupportCity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, const char *, int, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*, const char *);
SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, const char*, _ns1__getSupportDataSetResponse_getSupportDataSetResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, _ns1__getSupportDataSetResponse_getSupportDataSetResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, _ns1__getSupportDataSetResponse_getSupportDataSetResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap*, const char *, int, ns1__ArrayOfString *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif
/* _xsd__schema is a typedef synonym of _XML */

#ifndef SOAP_TYPE__xsd__schema_DEFINED
#define SOAP_TYPE__xsd__schema_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
